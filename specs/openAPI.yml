openapi: "3.0.2"
info:
  title: Blogging App
  description: Blogging App documentation
  version: "1.0"
servers:
  - url: http://localhost:3000
    description: Local development server
tags:
  - name: Articles
  - name: Comments
  - name: Favorites
  - name: Profile
  - name: Tags
  - name: User and Authentication
paths:
  /api/users:
    post:
      tags:
        - User and Authentication
      summary: "Register user"
      description: Register new user
      requestBody:
        required: true
        description: Details of the new user to register
        content:
          "application/json":
            examples:
              "Register User":
                description: "Example register new user"
                value:
                  email: "example@example.com"
                  username: "username"
                  password: "password"
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  description: "User email"
                  type: string
                  minLength: 1
                  maxLength: 100
                  pattern: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                username:
                  description: "User username"
                  type: string
                  minLength: 1
                  maxLength: 20
                password:
                  description: "User password"
                  type: string
                  minLength: 6
                  maxLength: 50
      responses:
        "200":
          $ref: "#/components/responses/UserSuccessResponse"
        "400":
          $ref: "#/components/responses/UserInputErrorResponse"
        "422":
          $ref: "#/components/responses/InputNotUnique"
  /api/users/login:
    post:
      summary: Existing user login
      description: Login for existing user
      tags:
        - User and Authentication
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Authenticate User":
                description: "Example user login"
                value:
                  email: "example@example.com"
                  password: "password"
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  description: "User email"
                  type: string
                  minLength: 1
                  maxLength: 100
                  pattern: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                password:
                  description: "User password"
                  type: string
                  minLength: 6
                  maxLength: 50
      responses:
        "200":
          $ref: "#/components/responses/UserSuccessResponse"
        "400":
          $ref: "#/components/responses/UserInputErrorResponse"
        "422":
          $ref: "#/components/responses/InputNotUnique"
  /api/user:

    get:
      tags:
      - User and Authentication
      summary: Get current user
      description: Gets the currently logged-in user. Auth is required
      responses:
        "200":
          $ref: "#/components/responses/UserSuccessResponse"
        "400":
          $ref: "#/components/responses/UserInputErrorResponse"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    patch:
      tags:
      - User and Authentication
      summary: Update current user
      description: Updates the currently logged-in user. Auth is requried
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Update User":
                description: "Example update user information"
                value:
                  email: "example@example.com"
                  username: "example"
                  password: "password"
                  bio: "my new bio"
                  image: "https://placehold.co/600x400"
            schema:
              type: object
              required:
                - email
                - username
              properties:
                email:
                  description: "User email"
                  type: string
                  minLength: 1
                  maxLength: 100
                  pattern: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                username:
                  description: "User username"
                  type: string
                  minLength: 1
                  maxLength: 20
                password:
                  description: "User password"
                  type: string
                  minLength: 6
                  maxLength: 50
                bio:
                  description: "User bio"
                  type: string
                  nullable: true
                  maxLength: 300
                image:
                  description: "User profile picture"
                  type: string
                  pattern: /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
                  nullable: true
                  maxLength: 1024
      responses:
        "200":
          $ref: "#/components/responses/UserSuccessResponse"
        "400":
          $ref: "#/components/responses/UserInputErrorResponse"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "422":
          $ref: "#/components/responses/InputNotUnique"
  /api/user/{username}:
    parameters:
      - name: username
        in: path
        required: true
        description: "Username of the user"
        schema:
          type: string
    get:
      summary: Get a profile
      description: Get a profile of a user of the system. Auth is optional
      tags:
      - Profile
      responses:
        "200":
          $ref: "#/components/responses/ProfileResponse"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /api/user/{username}/follow:
    parameters:
      - name: username
        in: path
        required: true
        description: "Username of the user"
        schema:
          type: string
    post:
      summary: Follow a user
      description: Follow a user by username. Auth is required
      tags:
      - Profile
      responses:
        "200":
          $ref: "#/components/responses/GenericSuccess"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/UserNotFound"
        "422":
          $ref: "#/components/responses/UserInvalidFollowAction"
  /api/user/{username}/unfollow:
    parameters:
      - name: username
        in: path
        required: true
        description: "Username of the user"
        schema:
          type: string
    post:
      tags:
      - Profile
      summary: Unfollow a user
      description: Unfollow a user by username. Auth is required
      responses:
        "200":
          $ref: "#/components/responses/GenericSuccess"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/UserNotFound"
        "422":
          $ref: "#/components/responses/UserInvalidFollowAction"
  /api/articles:
    parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/cursorParam'
      - name: tag
        in: query
        required: false
        description: "Get articles based on its tag data"
        example: "health"
        schema:
          type: string
      - name: author
        in: query
        required: false
        description: "Get articles based on its author"
        example: "bob"
        schema:
          type: string
      - name: favorited
        in: query
        required: false
        description: "Retrieve articles if they are favorited by the given user."
        example: "bob"
        schema:
          type: string
    get:
      summary: Get recent articles globally
      description: Get most recent articles globally. Use query parameters to filter results. Auth is optional
      tags:
      - Articles
      responses:
        "200":
          $ref: "#/components/responses/ArticlesSuccessResponse"
  /api/tags:
    get:
      tags:
      - Tags
      summary: Get tags
      description: Get tags. Auth not required
      responses:
        "200":
          $ref: "#/components/responses/TagsResponse"
  /api/article:
    post:
      summary: Create an article
      description: Create an article. Auth is required
      tags:
      - Articles
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Add new article":
                description: "Example Create new article"
                value:
                  title: "My Awesome Article"
                  description: "This my first article"
                  body: "hello world!"
                  tagList: ["tech", "health"]
            schema:
              type: object
              required:
                - title
                - description
                - body
                - tagList
              properties:
                title:
                  description: "Title of article"
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  description: "Description of article"
                  type: string
                  minLength: 1
                  maxLength: 255
                body:
                  description: "Main content of article"
                  type: string
                  minLength: 1
                  maxLength: 65535
                tagList:
                  description: "Tags of article"
                  type: array
                  minItems: 1
                  items:
                    type: string
                    nullable: false
                    minLength: 1
                    maxLength: 100
      responses:
        "200":
          $ref: "#/components/responses/ArticleSuccessResponse"
        "400":
          $ref: "#/components/responses/ArticleInputErrorResponse"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /api/article/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    delete:
      summary: Delete an article
      description: Delete an article. Auth is required
      tags:
      - Articles
      responses:
        "200":
          $ref: "#/components/responses/GenericSuccess"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/ArticleNotFound"
    patch:
      summary: Update an article
      description: Update an article. Auth is required
      tags:
      - Articles
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Update new article":
                description: "Example update article"
                value:
                  title: "My Awesome Article #2"
                  description: "This my second article"
                  body: "hello world again!"
                  tagList: ["tech", "health", "sport"]
            schema:
              type: object
              required:
                - title
                - description
                - body
                - tagList
              properties:
                title:
                  description: "Title of article"
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  description: "Description of article"
                  type: string
                  minLength: 1
                  maxLength: 255
                body:
                  description: "Main content of article"
                  type: string
                  minLength: 1
                  maxLength: 65535
                tagList:
                  description: "Tags of article"
                  type: array
                  minItems: 1
                  items:
                    type: string
                    nullable: false
                    minLength: 1
                    maxLength: 100
      responses:
        "200":
          $ref: "#/components/responses/ArticleSuccessResponse"
        "400":
          $ref: "#/components/responses/ArticleInputErrorResponse"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/ArticleNotFound"
    get:
      summary: Get an article
      description: Get an article. Auth not required
      tags:
      - Articles
      responses:
        "200":
          $ref: "#/components/responses/ArticleSuccessResponse"
        "404":
          $ref: "#/components/responses/ArticleNotFound"      
  /api/article/{slug}/favorite:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    description: "Favorite article"
    post:
      summary: Favorite an article
      description: Favorite an article. Auth is required
      tags:
      - Favorites
      responses:
        "200":
          $ref: "#/components/responses/GenericSuccess"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/ArticleNotFound"
  /api/article/{slug}/unfavorite:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    description: "Unfavorite article"
    post:
      summary: Unfavorite an article
      description: Unfavorite an article. Auth is required
      tags:
      - Favorites
      responses:
        "200":
          $ref: "#/components/responses/GenericSuccess"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/ArticleNotFound"
  /api/article/{slug}/comments:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    post:
      summary: Create a comment for an article
      description: Create a comment for an article. Auth is required
      tags:
      - Comments
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Add new comment":
                description: "Example add new comment in article"
                value:
                  body: "Awesome article!"
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: "Main content of comment"
                  type: string
                  minLength: 1
                  maxLength: 65535
      responses:
        "200":
          $ref: "#/components/responses/NewCommentSuccessResponse"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/ArticleNotFound"
    get:
      summary: Get comments for an article
      description: Get the comments for an article. Auth not required
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/cursorParam'
      tags:
      - Comments
      responses:
        "200":
          $ref: "#/components/responses/CommentSuccessResponse"
        "404":
          $ref: "#/components/responses/ArticleNotFound"
  /api/article/{slug}/comments/{commentId}:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
      - name: commentId
        in: path
        required: true
        description: "ID of the comment"
        schema:
          type: string
    delete:
      summary: Delete a comment for an article
      description: Delete a comment for an article. Auth is required
      tags:
      - Comments
      responses:
        "200":
          $ref: "#/components/responses/GenericSuccess"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/CommentNotFound"
  /api/feed:
    parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/cursorParam'
    get:
      description: "Get article from the user that have been followed by the current user. Auth not required"
      summary: Get recent articles from users you follow
      tags:
      - Articles
      responses:
        "200":
          $ref: "#/components/responses/ArticlesSuccessResponse"
        "401":
          $ref: "#/components/responses/Unauthenticated"
components:
  schemas:
    ErrorModel:
      type: object
      required:
        - data
        - error
        - success
      properties:
        success:
          type: boolean
        data:
          type: object
          nullable: true
        error:
          type: object
          required:
            - errorMsg
          properties:
            errorMsg:
              type: string
    Comment:
      type: object
      required:
        - body
        - createdAt
        - id
        - updatedAt
        - user
      properties:
        body:
          type: string
        createdAt:
          type: string
        id:
          type: number
        updatedAt:
          type: string
        user:
          type: object
          required:
            - username
            - image
          properties:
            username:
              type: string
            image:
              type: string
              nullable: true
    Article:
      type: object
      required:
        - body
        - createdAt
        - description
        - favoritesCount
        - id
        - tags
        - author
        - slug
        - title
        - updatedAt
        - authorId
        - favorited
      properties:
        body:
          type: string
        createdAt:
          type: string
        description:
          type: string
        favoritesCount:
          type: number
        id:
          type: number
        slug:
          type: string
        title:
          type: string
        updatedAt:
          type: string
        authorId:
          type: number
        favorited:
          type: boolean
        tags:
          type: array
          items:
            type: string
        author:
          type: object
          required:
            - username
            - image
            - following
          properties:
            username:
              type: string
            image:
              type: string
              nullable: true
            following:
              type: boolean
  responses:
    TagsResponse:
      description: Tags
      content:
        application/json:
          examples:
            "Tags response":
              description: "Tags response"
              value:
                success: true
                error: null
                data: { tags: ["tag-1", "tag-2"] }
          schema:
            required:
              - data
              - error
              - success
            type: object
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - tags
                properties:
                  user:
                    type: object
                    required:
                      - tags
                    properties:
                      tags:
                        type: array
                        items:
                          type: string
    ProfileResponse:
      description: Profile response
      content:
        application/json:
          examples:
            "User response":
              description: "User response"
              value:
                success: true
                error: null
                data:
                  {
                    user:
                      {
                        bio: "My biop",
                        following: true,
                        image: "https://placehold.co/600x400",
                        username: "user-profile-real",
                      },
                  }
          schema:
            type: object
            required:
              - data
              - error
              - success
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - bio
                  - following
                  - image
                  - username
                properties:
                  user:
                    type: object
                    required:
                      - email
                      - username
                      - success
                    properties:
                      bio:
                        type: string
                        nullable: true
                      following:
                        type: boolean
                      image:
                        type: string
                        nullable: true
                      username:
                        type: string
    UserSuccessResponse:
      description: User success response
      content:
        application/json:
          examples:
            "User response":
              description: "User response"
              value:
                success: true
                error: null
                data:
                  {
                    user:
                      {
                        email: "example@example.com",
                        token: "12345123",
                        username: "example-username",
                        bio: null,
                        image: null,
                      },
                  }
          schema:
            type: object
            required:
              - data
              - error
              - success
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - user
                properties:
                  user:
                    type: object
                    required:
                      - email
                      - username
                      - success
                    properties:
                      email:
                        type: string
                      token:
                        type: string
                        description: The value will be available only when user login or register
                        nullable: true
                      username:
                        type: string
                        nullable: true
                      image:
                        type: string
                        nullable: true
    UserInputErrorResponse:
      description: User input error
      content:
        application/json:
          examples:
            "Password Required":
              description: "Password input is empty"
              value:
                data: null
                error: { errorMsg: "Password is required" }
                success: false
            "Password Too Long":
              description: "Password input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Password should have 6 characters minimum" }
                success: false
            "Username Required":
              description: "Username input is empty"
              value:
                data: null
                error: { errorMsg: "Username is required" }
                success: false
            "Username Too Long":
              description: "Username input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Username is too long" }
                success: false
            "Email Required":
              description: "Email input is empty"
              value:
                data: null
                error: { errorMsg: "Email is required" }
                success: false
            "Email Too Long":
              description: "Email input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Email is too long" }
                success: false
            "Email Format":
              description: "Input data is not in email format"
              value:
                data: null
                error: { errorMsg: "Invalid email" }
                success: false
            "Bio Too Long":
              description: "Bio input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Bio is too long" }
                success: false
            "Image Too Long":
              description: "Image input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Image URL is too long" }
                success: false
            "Image Invalid URL":
              description: "Input data is not in URL format"
              value:
                data: null
                error: { errorMsg: "Invalid Image URL" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    UserInvalidEmailOrPassword:
      description: User error response during login
      content:
        application/json:
          examples:
            "Invalid Input":
              description: "Password or email is not match"
              value:
                data: null
                error: { errorMsg: "Email or password is not correct!" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    UserNotFound:
      description: User not found
      content:
        application/json:
          examples:
            "User not found":
              description: "User is not exist in database"
              value:
                data: null
                error: { errorMsg: "User not found!" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    UserInvalidFollowAction:
      description: User can not follow or unfollow
      content:
        application/json:
          examples:
            "Action Denied":
              description: "User can not follow or unfollow themself"
              value:
                data: null
                error: { errorMsg: "Unable to {action} yourself" }
                success: false
            "Already unfollowed":
              description: "Users cannot unfollow other users who are not being followed"
              value:
                data: null
                error: { errorMsg: "User already unfollowed" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    InputNotUnique:
      description: User input is not unique
      content:
        application/json:
          examples:
            "Invalid Input":
              description: "The input data is already exist in database"
              value:
                data: null
                error: { errorMsg: "The field {fieldName} is not unique" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    ArticleInputErrorResponse:
      description: User input error
      content:
        application/json:
          examples:
            "Title Required":
              description: "Title input is empty"
              value:
                data: null
                error: { errorMsg: "Title is required" }
                success: false
            "Title Too Long":
              description: "Title input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Title should have 6 characters minimum" }
                success: false
            "Description Required":
              description: "Description input is empty"
              value:
                data: null
                error: { errorMsg: "Description is required" }
                success: false
            "Description Too Long":
              description: "Description input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Description is too long" }
                success: false
            "Article content Required":
              description: "Article content input is empty"
              value:
                data: null
                error: { errorMsg: "Article content is required" }
                success: false
            "Article content Too Long":
              description: "Article content input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Article content is too long" }
                success: false
            "Tag Required":
              description: "Tag input is empty"
              value:
                data: null
                error: { errorMsg: "Tag is required" }
                success: false
            "Tag content Too Long":
              description: "Tag content input is exceed max limit"
              value:
                data: null
                error: { errorMsg: "Tag too long" }
                success: false
            "Empty Tag":
              description: "No content inside TagList"
              value:
                data: null
                error: { errorMsg: "Add at least one tag" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    ArticleSuccessResponse:
      description: Article success response
      content:
        application/json:
          examples:
            "Article":
              description: "Article Example"
              value:
                {
                  data:
                    {
                      article:
                        {
                          author:
                            {
                              following: true,
                              image: null,
                              username: "John Doe",
                            },
                          authorId: 17207,
                          body: "Hello world",
                          createdAt: "2023-11-11T11:14:08.033Z",
                          description: "description",
                          favorited: false,
                          favoritesCount: 0,
                          id: 10763,
                          slug: "my-article-yzd48v",
                          tags: ["tech"],
                          title: "My title",
                          updatedAt: "2023-11-11T11:14:08.033Z",
                        },
                    },
                  error: null,
                  success: true,
                }
          schema:
            type: object
            required:
              - data
              - error
              - success
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - article
                properties:
                  article:
                    $ref: '#/components/schemas/Article'
    ArticlesSuccessResponse:
      description: Articles success response
      content:
        application/json:
          examples:
            "Pagination":
              description: "Article Pagination"
              value:
                {
                  data:
                    {
                      articles:
                        [
                          {
                            author:
                              {
                                following: true,
                                image: null,
                                username: "John Doe",
                              },
                            authorId: 17207,
                            body: "Hello world",
                            createdAt: "2023-11-11T11:14:08.033Z",
                            description: "description",
                            favorited: false,
                            favoritesCount: 0,
                            id: 10763,
                            slug: "my-article-yzd48v",
                            tags: ["tech"],
                            title: "My title",
                            updatedAt: "2023-11-11T11:14:08.033Z",
                          },
                        ],
                      articlesCount: 1,
                    },
                  error: null,
                  success: true,
                }
            "Infinite Scroll":
              description: "Article Infinite scroll"
              value:
                {
                data: {
                  articles:
                    [
                      {
                        author:
                          {
                            following: true,
                            image: null,
                            username: "John Doe",
                          },
                        authorId: 17207,
                        body: "Hello world",
                        createdAt: "2023-11-11T11:14:08.033Z",
                        description: "description",
                        favorited: false,
                        favoritesCount: 0,
                        id: 10763,
                        slug: "my-article-yzd48v",
                        tags: ["tech"],
                        title: "My title",
                        updatedAt: "2023-11-11T11:14:08.033Z",
                      },
                    ],
                  hasMore: true,
                  nextCursor: 10763,
                },
                error: null,
                success: true,
              }
          schema:
            type: object
            required:
              - data
              - error
              - success
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - nextCursor
                  - hasMore
                  - articlesCount
                  - articles
                properties:
                  nextCursor:
                    type: number
                    nullable: true
                    description: Use this value to fetch articles by using infinte scroll
                  hasMore:
                    type: boolean
                    nullable: true
                    description: Indicator of whether fetchable data is available, only accessible through infinite scroll fetch.
                  articlesCount:
                    type: number
                    nullable: true
                    description: The total value for the articles data, not be available in the infinite scroll fetch.
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
    ArticleNotFound:
      description: Article not found
      content:
        application/json:
          examples:
            "Article not found":
              description: "Article is not exist in database"
              value:
                data: null
                error: { errorMsg: "Article not found!" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    CommentNotFound:
      description: Comment not found
      content:
        application/json:
          examples:
            "Comment not found":
              description: "Comment is not exist in database"
              value:
                data: null
                error: { errorMsg: "Comment not found!" }
                success: false
            "Article not found":
              description: "Article is not exist in database"
              value:
                data: null
                error: { errorMsg: "Article not found!" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    CommentSuccessResponse:
      description: Comments success response
      content:
        application/json:
          examples:
            "Pagination":
              description: "Comment Pagination"
              value:
                {
                  data:
                    {
                      comments:
                        [
                          {
                            body: "Hello world",
                            createdAt: "2023-11-11T11:14:08.033Z",
                            id: 10763,
                            updatedAt: "2023-11-11T11:14:08.033Z",
                            user: {
                              image: null,
                              username: "JohnDoe",
                            },
                          },
                        ],
                      commentsCount: 1,
                    },
                  error: null,
                  success: true,
                }
            "Infinite Scroll":
              description: "Comment Infinite scroll"
              value:
                {
                data: {
                  comments:
                    [
                      {
                        body: "Hello world",
                        createdAt: "2023-11-11T11:14:08.033Z",
                        id: 10763,
                        updatedAt: "2023-11-11T11:14:08.033Z",
                        user: {
                          image: null,
                          username: "JohnDoe",
                        },
                      },
                    ],
                  hasMore: true,
                  nextCursor: 10763,
                },
                error: null,
                success: true,
              }
          schema:
            type: object
            required:
              - data
              - error
              - success
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - nextCursor
                  - hasMore
                  - commentsCount
                  - comments
                properties:
                  nextCursor:
                    type: number
                    nullable: true
                    description: Use this value to fetch articles by using infinte scroll
                  hasMore:
                    type: boolean
                    nullable: true
                    description: Indicator of whether fetchable data is available, only accessible through infinite scroll fetch.
                  commentsCount:
                    type: number
                    nullable: true
                    description: The total value for the articles data, not be available in the infinite scroll fetch.
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
    NewCommentSuccessResponse:
      description: New Comments success response
      content:
        application/json:
          examples:
            "New Comment":
              description: "New Comment"
              value:
                {
                  data:
                    {
                      comment:
                        {
                          body: "Hello world",
                          createdAt: "2023-11-11T11:14:08.033Z",
                          id: 10763,
                          updatedAt: "2023-11-11T11:14:08.033Z",
                          user: {
                            image: null,
                            username: "JohnDoe",
                          },
                        },
                    },
                  error: null,
                  success: true,
                }
          schema:
            type: object
            required:
              - data
              - error
              - success
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - comment
                properties:
                  comment:
                    $ref: '#/components/schemas/Comment'
    Unauthenticated:
      description: User does not have any permission
      content:
        application/json:
          examples:
            "Unauthenticated":
              description: "User is not logged in"
              value:
                data: null
                error: { errorMsg: "No authorization token was found" }
                success: false
            "Unahtorized":
              description: "User does not have permission to do this action"
              value:
                data: null
                error: { errorMsg: "User unauthorized!" }
                success: false
          schema:
            $ref: "#/components/schemas/ErrorModel"
    GenericSuccess:
      description: Generic success response
      content:
        application/json:
          examples:
            "Success response":
              description: "Success response"
              value:
                success: true
                error: null
                data: { success: true }
          schema:
            type: object
            required:
              - data
              - error
              - success
            properties:
              success:
                type: boolean
              error:
                type: object
                nullable: true
              data:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: number
        default: 0
        nullable: true
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      required: false
      name: limit
      description: The numbers of items to return.
      schema:
        default: 10
        nullable: true
        type: number
    cursorParam:
      name: cursor
      in: query
      required: false
      description: "Article ID to reference in pagination; the offset query will be ignored if this value is set."
      schema:
        type: number