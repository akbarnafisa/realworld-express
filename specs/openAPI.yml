openapi: '3.0.2'
info:
  title: Blogging App
  version: '1.0'
# servers:
#   - url: https://{env}.express-node.com:{port}/
#     description: The production API server
#     variables:
#       username:
#         # note! no enum here means it is an open value
#         default: demo
#         description: this value is assigned by the service provider, in this example `gigantic-server.com`
#       port:
#         enum:
#           - '8443'
#           - '443'
#         default: '8443'
#       basePath:
#         # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
#         default: v2
paths:
  /api/users:
    post:
      description: "Register user"
      responses:
        '200':
          description: OK
  /api/users/login:
    post:
      description: "Authenticate user"
      responses:
        '200':
          description: OK
  /api/user/current:
    get:
      description: "Get info about current user that already logged in"
      responses:
        '200':
          description: OK
    patch:
      description: "Update  user information"
      responses:
        '200':
          description: OK
  /api/user/{username}:
    parameters:
      - name: username
        in : path
        required: true
        description: "Username of the user"
        schema:
          type: string
    get:
      description: "Get information about specific user"
      responses:
        '200':
          description: OK
  /api/user/{username}/follow:
    parameters:
      - name: username
        in : path
        required: true
        description: "Username of the user"
        schema:
          type: string
    post:
      description: "Follow user"
      responses:
        '200':
          description: OK
  /api/user/{username}/unfollow:
    parameters:
      - name: username
        in : path
        required: true
        description: "Username of the user"
        schema:
          type: string
    post:
      description: "Unfollow user"

      responses:
        '200':
          description: OK
  /api/articles:
    parameters:
      - name: limit
        in : query
        required: false
        description: "Limit the amount of data to retrieve"
        schema:
          default: 10
          type: number
      - name: offset
        in : query
        required: false
        description: "Skip the amount of data; the value will be ignored if a cursor query is available."
        schema:
          default: 0
          type: number
      - name: cursor
        in : query
        required: false
        description: "Article ID to reference in pagination; the offset query will be ignored if this value is set."
        schema:
          type: number
      - name: tag
        in : query
        required: false
        description: "Get articles based on its tag data"
        example: "/api/articles?tag=health"
        schema:
          type: string
      - name: author
        in : query
        required: false
        description: "Get articles based on its author"
        example: "/api/articles?author=bob"
        schema:
          type: string
      - name: favorited
        in : query
        required: false
        description: "Retrieve articles if they are favorited by the given user."
        example: "/api/articles?favorited=bob"
        schema:
          type: string
          
    get:
      description: "Get all articles data"

      responses:
        '200':
          description: OK
  /api/tags:
    get:
      description: "Get all tags data"
      responses:
        '200':
          description: OK
  /api/article:
    post:
      description: "Create new article"
      responses:
        '200':
          description: OK
  /api/article/{slug}:
    parameters:
      - name: slug
        in : path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    delete:
      description: "Delete specific article"
      responses:
        '200':
          description: OK
    patch:
      description: "Update specific article"

      responses:
        '200':
          description: OK
    get:
      description: "Get specific article"
      responses:
        '200':
          description: OK
  /api/article/{slug}/favorite:
    parameters:
      - name: slug
        in : path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    description: "Favorite article"
    post:
      responses:
        '200':
          description: OK
  /api/article/{slug}/unfavorite:
    parameters:
      - name: slug
        in : path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    description: "Unfavorite article"
    post:
      responses:
        '200':
          description: OK
  /api/article/{slug}/comments:
    parameters:
      - name: slug
        in : path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    post:
      description: "Create new comment in article"
      responses:
        '200':
          description: OK
    get:
      parameters:
        - name: limit
          in : query
          required: false
          description: "Limit the amount of data to retrieve"
          schema:
            default: 10
            type: number
        - name: offset
          in : query
          required: false
          description: "Skip the amount of data; the value will be ignored if a cursor query is available."
          schema:
            default: 0
            type: number
        - name: cursor
          in : query
          required: false
          description: "Comment ID to reference in pagination; the offset query will be ignored if this value is set."
          schema:
            type: number
      description: "Get all comments in article"
      responses:
        '200':
          description: OK
  /api/article/{slug}/comments/{commentId}:
    parameters:
      - name: slug
        in : path
        required: true
        description: "Slug of the article"
        schema:
          type: string
      - name: commentId
        in : path
        required: true
        description: "ID of the comment"
        schema:
          type: string
    delete:
      description: "Delete comment in article"
      responses:
        '200':
          description: OK
  /api/feed:
    parameters:
      - name: limit
        in : query
        required: false
        description: "Limit the amount of data to retrieve"
        schema:
          default: 10
          type: number
      - name: offset
        in : query
        required: false
        description: "Skip the amount of data; the value will be ignored if a cursor query is available."
        schema:
          default: 0
          type: number
      - name: cursor
        in : query
        required: false
        description: "Article ID to reference in pagination; the offset query will be ignored if this value is set."
        schema:
          type: number
    get:
      description: "Get article from the user that have been followed by the current user"

      responses:
        '200':
          description: OK