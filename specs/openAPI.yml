openapi: "3.0.2"
info:
  title: Blogging App
  version: "1.0"
# servers:
#   - url: https://{env}.express-node.com:{port}/
#     description: The production API server
#     variables:
#       username:
#         # note! no enum here means it is an open value
#         default: demo
#         description: this value is assigned by the service provider, in this example `gigantic-server.com`
#       port:
#         enum:
#           - '8443'
#           - '443'
#         default: '8443'
#       basePath:
#         # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
#         default: v2
paths:
  /api/users:
    post:
      description: "Register user"
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Register User":
                description: "Example register new user"
                value:
                  email: "example@example.com"
                  username: "username"
                  password: "password"
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  description: "User email"
                  type: string
                  minLength: 1
                  maxLength: 100
                  pattern: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                username:
                  description: "User username"
                  type: string
                  minLength: 1
                  maxLength: 20
                password:
                  description: "User password"
                  type: string
                  minLength: 6
                  maxLength: 50
      responses:
        "200":
          description: OK
  /api/users/login:
    post:
      description: "Authenticate user"
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Authenticate User":
                description: "Example user login"
                value:
                  email: "example@example.com"
                  password: "password"
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  description: "User email"
                  type: string
                  minLength: 1
                  maxLength: 100
                  pattern: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                password:
                  description: "User password"
                  type: string
                  minLength: 6
                  maxLength: 50
      responses:
        "200":
          description: OK
  /api/user/current:
    get:
      description: "Get info about current user that already logged in"
      responses:
        "200":
          description: OK
    patch:
      description: "Update  user information"
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Update User":
                description: "Example update user information"
                value:
                  email: "example@example.com"
                  username: "example"
                  password: "password"
                  bio: "my new bio"
                  image: "https://placehold.co/600x400"
            schema:
              type: object
              required:
                - email
                - username
              properties:
                email:
                  description: "User email"
                  type: string
                  minLength: 1
                  maxLength: 100
                  pattern: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
                username:
                  description: "User username"
                  type: string
                  minLength: 1
                  maxLength: 20
                password:
                  description: "User password"
                  type: string
                  minLength: 6
                  maxLength: 50
                bio:
                  description: "User bio"
                  type: string
                  nullable: true
                  maxLength: 300
                image:
                  description: "User profile picture"
                  type: string
                  pattern: /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
                  nullable: true
                  maxLength: 1024
      responses:
        "200":
          description: OK
  /api/user/{username}:
    parameters:
      - name: username
        in: path
        required: true
        description: "Username of the user"
        schema:
          type: string
    get:
      description: "Get information about specific user"
      responses:
        "200":
          description: OK
  /api/user/{username}/follow:
    parameters:
      - name: username
        in: path
        required: true
        description: "Username of the user"
        schema:
          type: string
    post:
      description: "Follow user"
      responses:
        "200":
          description: OK
  /api/user/{username}/unfollow:
    parameters:
      - name: username
        in: path
        required: true
        description: "Username of the user"
        schema:
          type: string
    post:
      description: "Unfollow user"

      responses:
        "200":
          description: OK
  /api/articles:
    parameters:
      - name: limit
        in: query
        required: false
        description: "Limit the amount of data to retrieve"
        schema:
          default: 10
          nullable: true
          type: number
      - name: offset
        in: query
        required: false
        description: "Skip the amount of data; the value will be ignored if a cursor query is available."
        schema:
          default: 0
          nullable: true
          type: number
      - name: cursor
        in: query
        required: false
        description: "Article ID to reference in pagination; the offset query will be ignored if this value is set."
        schema:
          type: number
      - name: tag
        in: query
        required: false
        description: "Get articles based on its tag data"
        example: "/api/articles?tag=health"
        schema:
          type: string
      - name: author
        in: query
        required: false
        description: "Get articles based on its author"
        example: "/api/articles?author=bob"
        schema:
          type: string
      - name: favorited
        in: query
        required: false
        description: "Retrieve articles if they are favorited by the given user."
        example: "/api/articles?favorited=bob"
        schema:
          type: string

    get:
      description: "Get all articles data"

      responses:
        "200":
          description: OK
  /api/tags:
    get:
      description: "Get all tags data"
      responses:
        "200":
          description: OK
  /api/article:
    post:
      description: "Create new article"
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Add new article":
                description: "Example Create new article"
                value:
                  title: "My Awesome Article"
                  description: "This my first article"
                  body: "hello world!"
                  tagList: ["tech", "health"]
            schema:
              type: object
              required:
                - title
                - description
                - body
                - tagList
              properties:
                title:
                  description: "Title of article"
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  description: "Description of article"
                  type: string
                  minLength: 1
                  maxLength: 255
                body:
                  description: "Main content of article"
                  type: string
                  minLength: 1
                  maxLength: 65535
                tagList:
                  description: "Tags of article"
                  type: array
                  minItems: 1
                  items:
                    type: string
                    nullable: false
                    minLength: 1
                    maxLength: 100
      responses:
        "200":
          description: OK
  /api/article/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    delete:
      description: "Delete specific article"
      responses:
        "200":
          description: OK
    patch:
      description: "Update specific article"
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Update new article":
                description: "Example update article"
                value:
                  title: "My Awesome Article #2"
                  description: "This my second article"
                  body: "hello world again!"
                  tagList: ["tech", "health", "sport"]
            schema:
              type: object
              required:
                - title
                - description
                - body
                - tagList
              properties:
                title:
                  description: "Title of article"
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  description: "Description of article"
                  type: string
                  minLength: 1
                  maxLength: 255
                body:
                  description: "Main content of article"
                  type: string
                  minLength: 1
                  maxLength: 65535
                tagList:
                  description: "Tags of article"
                  type: array
                  minItems: 1
                  items:
                    type: string
                    nullable: false
                    minLength: 1
                    maxLength: 100
      responses:
        "200":
          description: OK
    get:
      description: "Get specific article"
      responses:
        "200":
          description: OK
  /api/article/{slug}/favorite:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    description: "Favorite article"
    post:
      responses:
        "200":
          description: OK
  /api/article/{slug}/unfavorite:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    description: "Unfavorite article"
    post:
      responses:
        "200":
          description: OK
  /api/article/{slug}/comments:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
    post:
      description: "Create new comment in article"
      requestBody:
        required: true
        content:
          "application/json":
            examples:
              "Add new comment":
                description: "Example add new comment in article"
                value:
                  body: "Awesome article!"
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: "Main content of comment"
                  type: string
                  minLength: 1
                  maxLength: 65535
      responses:
        "200":
          description: OK
    get:
      parameters:
        - name: limit
          in: query
          required: false
          description: "Limit the amount of data to retrieve"
          schema:
            default: 10
            nullable: true
            type: number
        - name: offset
          in: query
          required: false
          description: "Skip the amount of data; the value will be ignored if a cursor query is available."
          schema:
            default: 0
            nullable: true
            type: number
        - name: cursor
          in: query
          required: false
          description: "Comment ID to reference in pagination; the offset query will be ignored if this value is set."
          schema:
            type: number
      description: "Get all comments in article"
      responses:
        "200":
          description: OK
  /api/article/{slug}/comments/{commentId}:
    parameters:
      - name: slug
        in: path
        required: true
        description: "Slug of the article"
        schema:
          type: string
      - name: commentId
        in: path
        required: true
        description: "ID of the comment"
        schema:
          type: string
    delete:
      description: "Delete comment in article"
      responses:
        "200":
          description: OK
  /api/feed:
    parameters:
      - name: limit
        in: query
        required: false
        description: "Limit the amount of data to retrieve"
        schema:
          default: 10
          nullable: true
          type: number
      - name: offset
        in: query
        required: false
        description: "Skip the amount of data; the value will be ignored if a cursor query is available."
        schema:
          default: 0
          nullable: true
          type: number
      - name: cursor
        in: query
        required: false
        description: "Article ID to reference in pagination; the offset query will be ignored if this value is set."
        schema:
          type: number
    get:
      description: "Get article from the user that have been followed by the current user"

      responses:
        "200":
          description: OK
